Directory information:
Database: Mysql

Entity types:
DE_UNKNOWN   = '\0',

// Entity types
ET_DIRECTORY = 'D',
ET_SERVICE   = 'S',

Directory only:
mVisible (uchar) Visibility
// Visibility types
VT_VISIBLE   = 'V',
VT_INVISIBLE = 'I'

Service only:
mNetAddress (RawBuffer/binary) server address
mVersion (wstring) Version (can be null)
mProtoName (wstring) Protocol Name (can null)
mProtoVersion (wstring) Proto version (can null)
mBlobLen (ushort) Length of blob (can 0)
mBlob (uChar*) Blob (can be null)

Members that apply to ALL types
mPath (wstring) Path to parent dir
mName (wstring) 
mDisplayName (wstring) Display name (may be null)
mCreated (long) time created as time_t
mTouched (long) Last time touched time_t
mCreateId (ulong) Creator UserID
mTouchID (ulong) Last userid that touched it
mLifespan (ulong) Lifespan in sec
mCRC (ulong) Entity CRC
mdataobjects.size (short) Number of data objects
mDataObject (DataObjectTypeSet) List of dataobjects or size/num of objects 
mACL (DirACLList) privledges

acl members:
mType (char) o = owner r = read w = write d = delete
UserId (ulong)
Community (ulong) game type?
Trust (short) Trust level

Dataobject members (apears to be path related):
DataObject((uchar*)type, uchar* (type), Data, datasize)
mDataType (String) 
_cs = checksum, 
_ps = size,
__RSClientCount = routing server client count,
 roomflags,
 Description,
 __FactCur_RoutingServ**Game
 **ValidVersions
mRefCt (long) reference count
mData (bytebuffer pointer) contains type information
mLifeSpan (long) lifespan in sec
mExpiretime (time_t) Time objecct expires



	DirectoryData* dirData = new DirectoryData;
	if (dirData)
	{
		TCPSocket* tcpSocket = new TCPSocket(directoryServers[0]);
		if (tcpSocket)
		{
			dirData->dirSocket = new AuthSocket(identity, tcpSocket, true, 4, true);
			if (dirData->dirSocket)
			{
				dirData->opType = op_modify;
				dirData->resultType = status_result;
				dirData->error = Error_Timeout;
				dirData->path = path.GetUnicodeString();
				dirData->timeout = timeout;
				dirData->autoDelete = async;
				dirData->dirResultCompletion = completion;
				dirData->doService = false;
				dirData->destServer = modifiedOnDirServer;
				dirData->newName = newDirName.GetUnicodeString();
				dirData->newDisplayName = newDisplayName.GetUnicodeString();
				dirData->uniqueDisplayName = uniqueDisplayName;
				dirData->dirVisible = dirVisible;
				dirData->lifeSpan = newLifeSpan;
				dirData->dataObjects = dataObjects;

				for (unsigned int i = 0; i < numAddrs; i++)
					dirData->directories.push_back(directoryServers[i]);

				dirData->curDirectory = dirData->directories.begin();

				dirData->dirSocket->OpenEx(true, timeout, true, SessionOpenDone, dirData);



			if (dirData->doService)
			{
				SMsgDirG2AddService msg(extended);

				unsigned char theFlags = dirData->uniqueDisplayName ? EF_UNIQUEDISPLAYNAME : 0;
				
				if (dirData->overwrite)
					theFlags |= EF_OVERWRITE;

				if (extended)
					msg.SetDataObjects(dirData->dataObjects);

				msg.SetEntityFlags(theFlags);
				msg.SetName(dirData->name);
				msg.SetDisplayName(dirData->displayName);
				msg.SetLifespan(dirData->lifeSpan);
				msg.SetPath(dirData->path);
				msg.SetNetAddress(RawBuffer(dirData->serviceAddr, dirData->serviceAddrSize));

				dirData->dirSocket->SendBaseMsg(msg, true, dirData->timeout, true, true);
			}
			else
			{
				SMsgDirG2AddDirectory msg(extended);

				if (extended)
					msg.SetDataObjects(dirData->dataObjects);

				unsigned char theFlags = dirData->dirVisible ? EF_DIRVISIBLE : EF_DIRINVISIBLE;
				if (dirData->uniqueDisplayName)
					theFlags |= EF_UNIQUEDISPLAYNAME;

				msg.SetEntityFlags(theFlags);
				msg.SetDirName(dirData->name);
				msg.SetDisplayName(dirData->displayName);
				msg.SetLifespan(dirData->lifeSpan);
				msg.SetPath(dirData->path);

				dirData->dirSocket->SendBaseMsg(msg, true, dirData->timeout, true, true);