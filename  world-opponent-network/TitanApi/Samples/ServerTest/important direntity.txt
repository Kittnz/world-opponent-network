	aMsg.AppendShort(mDataObjects.size());	// num data objects
	
	DirDataObjectList::iterator anItr = mDataObjects.begin();
	while(anItr!=mDataObjects.end())
	{
		DirDataObject &aDataObject = *anItr;
		aMsg.AppendString(aDataObject.mDataType,1);
		aMsg.AppendBuffer(aDataObject.mData,2);
		++anItr;
	}Courteney Cox 

	aMsg.AppendShort(0); 
//////////////////////////////////////
	aMsg.AppendShort(mDataObjects.size());
	DirDataObjectList::iterator anItr = mDataObjects.begin();
	while(anItr!=mDataObjects.end())
	{
		aMsg.AppendString(anItr->mDataType,1);
		aMsg.AppendBuffer(anItr->mData,2);
		++anItr;
	} 



void UpdateRooms(AbortableContext *context)
  {
    LOG_WON(("Updating Room List"))

    if (!identity.GetLoginName().size())
    {
      ERR_FATAL(("No Identity!"))
    }

    // Data is the valid versions
    WONCommon::DataObjectTypeSet data;
    data.insert(WONCommon::DataObject(dataClientCount));
    data.insert(WONCommon::DataObject(dataFlags));
    data.insert(WONCommon::DataObject(dataPermanent));

    LOG_WON(("GetDirectoryEx: Num Servers %d", directoryServers.num))

    WONAPI::Error error = WONAPI::GetDirectoryEx
    (
      &identity,                    // Identity* identity
      directoryServers.servers,     // const IPSocket::Address* directoryServers
      directoryServers.num,         // unsigned int numAddrs
	    NULL,                         // IPSocket::Address* fromDirServer
	    dirDarkReign2,                // const WONCommon::WONString& path
	    NULL,                         // WONMsg::DirEntityList* result
	    WONMsg::GF_DECOMPSERVICES |   // long flags
      WONMsg::GF_ADDTYPE | 
      WONMsg::GF_ADDDISPLAYNAME | 
      WONMsg::GF_SERVADDNAME | 
      WONMsg::GF_SERVADDNETADDR |
      WONMsg::GF_ADDDOTYPE | 
      WONMsg::GF_ADDDODATA,
      data,                         // const WONCommon::DataObjectTypeSet& dataSet
			0,                            // DirEntityCallback callback 
      0,                            // void* callbackPrivData
			requestTimeout,               // long timeout
			TRUE,                         // bool async
			UpdateRoomsCallback,          // void (*f)(const DirEntityListResult&, privsType)
      context                       // privsType privs
    );

    switch (error)
    {
      case WONAPI::Error_Success:
      case WONAPI::Error_Pending:
        break;

      default:
        ERR_FATAL(("GetDirectoryEx: %d %s", error, WONErrorToString(error)))
    }
  }
  //
  // TitanServerListCallback
  //
	void TitanServerListCallback(const WONAPI::DirEntityListResult &result, AbortableContext *context)
  { 
    ASSERT(context)

    LOG_WON(("ServerListCallback in"))
    LOG_WON(("GetDirectoryEx CB: %d %s", result.error, WONErrorToString(result.error)))

    if (context->abort.Test())
    {
      LOG_WON(("Was Aborted"))
    }
    else
    {
		  switch (result.error) 
		  {
	  	  case WONAPI::Error_Success:
			  {
          U16 numAuth = 0;
          U16 numFirewall = 0;
          U16 numProfile = 0;

          WONMsg::DirEntityList::const_iterator i;

          // Iterate the server list and count the number of various server types
          for 
          (
            i = result.entityList->begin(); 
            i != result.entityList->end(); 
            ++i
          )
          {
            if (i->mName == serverAuth)
            {
              numAuth++;
            }
            else if (i->mName == serverFirewall)
            {
              numFirewall++;
            }
            else if (i->mName == serverProfile)
            {
              numProfile++;
            }
          }

          // Wait for data mutex
          LOG_WON(("critData.Wait"))
          critData.Wait();

          // Resize our server arrays to accomodate these new sizes
          authServers.Resize(numAuth);
          firewallServers.Resize(numFirewall);
          profileServers.Resize(numProfile);

          // Reset nums so that they can be used as indexes
          numAuth = 0;
          numFirewall = 0;
          numProfile = 0;

          // Fill in the new servers
          for 
          (
            i = result.entityList->begin(); 
            i != result.entityList->end(); 
            ++i
          )
          {
            if (i->mName == serverAuth)
            {
              authServers.servers[numAuth] = WONAPI::IPSocket::Address(*(unsigned long*)(i->mNetAddress.data() + 2), ntohs(*(unsigned short*)i->mNetAddress.data()));
              LOG_WON(("Authentication Server: %s", authServers.servers[numAuth].GetAddressString(TRUE).c_str()))
              numAuth++;
            }
            else if (i->mName == serverFirewall)
            {
              firewallServers.servers[numFirewall] = WONAPI::IPSocket::Address(*(unsigned long*)(i->mNetAddress.data() + 2), ntohs(*(unsigned short*)i->mNetAddress.data()));
              LOG_WON(("Firewall Server: %s", firewallServers.servers[numFirewall].GetAddressString(TRUE).c_str()))
              numFirewall++;
            }
            else if (i->mName == serverProfile)
            {
              profileServers.servers[numProfile] = WONAPI::IPSocket::Address(*(unsigned long*)(i->mNetAddress.data() + 2), ntohs(*(unsigned short*)i->mNetAddress.data()));
              LOG_WON(("Profile Server: %s", profileServers.servers[numProfile].GetAddressString(TRUE).c_str()))
              numProfile++;
            }
          }

          // Signal data mutex
          LOG_WON(("critData.Signal"))
          critData.Signal();

          // If there are firewall servers detect to see if we're behind a firewall
          if (firewallServers.num && firewallStatus == Firewall::Unchecked)
          {
            // Detect firewall
            DetectFirewall();
          }

          // Are there any authentication servers
          if (authServers.num)
          {
            // We are now connected
            connected = TRUE;
            PostEvent(Message::RetrievedServerList);
          }
          else
          {
            // No auth servers could be found
            PostEvent(Error::ConnectionFailure);
          }
  	      break;
			  }

  		  case WONAPI::Error_Timeout:
	  	  case WONMsg::StatusDir_DirNotFound:
          PostEvent(Error::ConnectionFailure);
  			  break;

		    default:
          LOG_ERR(("GetDirectoryEx CB: %d %s", result.error, WONErrorToString(result.error)))
          PostEvent(Error::ConnectionFailure);
  			  break;
		  }
    }

    delete context;

    LOG_WON(("ServerListCallback out"))
	}
  //
  // Add a game to the list of games
  //
  void Room::AddGame(const GameName &name, U32 size, const U8 *d)
  {
    WONCommon::RawBuffer data;
    data.assign(d, size);

    if (internal.routingServer)
    {
      internal.routingServer->CreateDataObjectEx
      (
        WONAPI::RoutingServerClient::GROUPID_ALLUSERS,  // ClientOrGroupId theLinkId
        dataGamePrefix + (U8 *) name.str,               // const WONCommon::RawBuffer& theDataTypeR
        routingServer->GetClientId(),                   // ClientOrGroupId theOwnerId
        0,                                              // unsigned short theLifespan
        data,                                           // const WONCommon::RawBuffer& theDataR
        CreateDataObjectCallback,                       // void (*f)(short, privsType)
        (void *) NULL                                   // privsType t)
      );
    }
  }
